*khulnasoft.txt*  Khulnasoft

GETTING STARTED                                 *khulnasoft*

Run the `:Khulnasoft Auth` command to login to Khulnasoft. This is required to
enable the plugin.

Once logged in, suggested completions will be displayed inline as virtual
text. You can insert a completion by pressing <Tab>.

COMMANDS                                        *:Khulnasoft*

                                                *:Khulnasoft_Auth*
:Khulnasoft Auth           Authenticate to Khulnasoft.

                                                *:Khulnasoft_Chat*
:Khulnasoft Chat           Open Khulnasoft Chat in a browser window

                                                *:Khulnasoft_Disable*
:Khulnasoft Disable        Disable Khulnasoft completions

                                                *:Khulnasoft_Enable*
:Khulnasoft Enable         Re-enable Khulnasoft completions after running :Khulnasoft Disable

                                                *:Khulnasoft_DisableBuffer*
:Khulnasoft DisableBuffer  Disable Khulnasoft completions in the current buffer only.

                                                *:Khulnasoft_EnableBuffer*
:Khulnasoft EnableBuffer   Re-enable Khulnasoft completions in the current
                        buffer after running :Khulnasoft DisableBuffer

                                                *:Khulnasoft_Toggle*
:Khulnasoft Toggle         Enable Khulnasoft completions if they are disabled.
                        Disable Khulnasoft completions if they are enabled. Does
                        NOT enable completions for current buffer, if they are
                        disabled with :Khulnasoft DisableBuffer. However, still
                        affects other buffers.

OPTIONS                                         *khulnasoft-options*

                                                *g:khulnasoft_filetypes*
g:khulnasoft_filetypes     A dictionary mapping whether khulnasoft should be
                        enabled or disabled in certain filetypes. This can
                        be used to opt out of completions for certain filetypes.
>
                        let g:khulnasoft_filetypes = {
                              \ 'bash': v:false,
                              \ 'typescript': v:true,
                              \ }
<

                                                *g:khulnasoft_enabled*
g:khulnasoft_enabled       A global boolean flag that controls whether khulnasoft
                        completions are enabled or disabled by default.
>
                        let g:khulnasoft_enabled = v:true
<

                                                *g:khulnasoft_manual*
g:khulnasoft_manual        If true, khulnasoft completions will never automatically
                        trigger.
>
                        let g:khulnasoft_manual = v:true
<

                                                *g:khulnasoft_no_map_tab*
g:khulnasoft_no_map_tab    A global boolean flag that controls whether khulnasoft
                        uses <TAB> for the mapping khulnasoft#Accept
>
                        let g:khulnasoft_no_map_tab = v:true
<

                                                *g:khulnasoft_idle_delay*
g:khulnasoft_idle_delay    Delay in milliseconds before autocompletions are
                        shown (limited by language server to a minimum of 75).
>
                        let g:khulnasoft_idle_delay = 500
<
                                                *g:khulnasoft_render*
g:khulnasoft_render        A global boolean flag that controls whether khulnasoft
                        renders are enabled or disabled.
>
                        let g:khulnasoft_render = v:false
<

                                                *g:khulnasoft_tab_fallback*
g:khulnasoft_tab_fallback  The fallback key when there is no suggestion display
                        in `khulnasoft#Accept()`.
>
                        let g:khulnasoft_tab_fallback = "\t"
<
                                                *g:khulnasoft_bin*
g:khulnasoft_bin           Manually set the path to the `khulnasoft` language server
                        binary on your system.
                        If unset, `khulnasoft.vim` will fetch and download the
                        binary from the internet.
>
                        let g:khulnasoft_bin = "~/.local/bin/khulnasoft_language_server"
<
                                                *g:khulnasoft_os*
g:khulnasoft_os            Manually set the host OS, accepted values are
                        "Linux", "Darwin", "Windows". if unset, the value will
                        be obtained using `uname`.
>
                        let g:khulnasoft_os = "Linux"
<
                                                *g:khulnasoft_arch*
g:khulnasoft_arch          Manually set the host architecture, accepted values
                        are "x86_64", "aarch64", "arm". If unset, the value
                        will be obtained using `uname -m`.
>
                        let g:khulnasoft_arch = "x86_64"
<
                                                *g:khulnasoft_port_config*
g:khulnasoft_port_config
                        Set the ports the chat client and web server use.
			Pass in web_server and chat_client fields to the mapping to set.
                        Please note that if this option is set, only one
			window will work with khulnasoft.
			It is recommended to set both the web_server and chat_client options
			if using this. 
			If you are setting this because you are using vim remotely and want chat to work
			you will need to forward the two ports you set here, along with port 42100.
			That window can have as many buffers within it, but any other
			opened windows will not be able to use Khulnasoft's features.
>
                        let g:khulnasoft_port_config = {
				'web_server': <Your web server port>,
				'chat_client': <Your chat client port>
				}
<
                                                *g:khulnasoft_virtual_text_priority*
g:khulnasoft_virtual_text_priority
                        The priority used for Khulnasoft's virtual text completions
                        in Neovim. This can control how completions appear when
                        multiple virtual text items are on the same line, such
                        as when using LSP inlay hints.

                        The priority can be set on a per-buffer basis by setting
                        the b:khulnasoft_virtual_text_priority variable. If
                        neither of these are set, the default priority is 65535,
                        which will usually place it above any other virtual text.
>
                        let g:khulnasoft_virtual_text_priority = 1000
<

                                                *b:khulnasoft_virtual_text_priority*
b:khulnasoft_virtual_text_priority
                        The priority given to Khulnasoft's virtual text completions
                        for the current buffer in Neovim. If not set,
                        g:khulnasoft_virtual_text_priority is used.
>
                        let b:khulnasoft_virtual_text_priority = 1000
<

MAPS                                            *khulnasoft-maps*

                                                *khulnasoft-i_<Tab>*
Khulnasoft.vim defaults to using the <Tab> key to insert the current
suggestion. If there is no suggestion display, the <Tab> key will fallback
to any existing <Tab> mapping you have. This is bound to `khulnasoft#Accept()`

Other Maps ~

                                                *khulnasoft-i_CTRL-]*
<C-]>                   Dismiss the current suggestion.
<Plug>(khulnasoft-dismiss)
<Cmd>call khulnasoft#Clear()<CR>

                                                *khulnasoft-i_ALT-]*
<M-]>                   Cycle to the next suggestion.
<Plug>(khulnasoft-next)
<Cmd>call khulnasoft#CycleCompletions(1)<CR>

                                                *khulnasoft-i_ALT-[*
<M-[>                   Cycle to the previous suggestion.
<Plug>(khulnasoft-previous)
<Cmd>call khulnasoft#CycleCompletions(-1)<CR>

SYNTAX HIGHLIGHTING                             *khulnasoft-highlighting*

Inline suggestions are highlighted using the KhulnasoftSuggestion group,
which defaults to a gray color. You can configure this highlight group for
your colorscheme in after/colors/<colorschemename>.vim in your
'runtimepath' (e.g., ~/.config/nvim/after/colors/solarized.vim).  Example
declaration:
>
        highlight KhulnasoftSuggestion guifg=#555555 ctermfg=8
<
 vim:tw=78:et:ft=help:norl:
